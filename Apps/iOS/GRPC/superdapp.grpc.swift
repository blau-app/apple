// superdapp.grpc.swift
// Copyright (c) 2024 Party Labs, Inc

//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: services/superdapp.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `Superdapp_PitBossClient`, then call methods of this protocol to make API calls.
protocol Superdapp_PitBossClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol? { get }

    func getTokenBundles(
        _ request: Superdapp_GetTokenBundlesRequest,
        callOptions: CallOptions?,
        handler: @escaping (Superdapp_TokenBundleResponse) -> Void
    ) -> ServerStreamingCall<Superdapp_GetTokenBundlesRequest, Superdapp_TokenBundleResponse>
}

extension Superdapp_PitBossClientProtocol {
    var serviceName: String {
        "superdapp.PitBoss"
    }

    /// Server streaming call to GetTokenBundles
    ///
    /// - Parameters:
    ///   - request: Request to send to GetTokenBundles.
    ///   - callOptions: Call options.
    ///   - handler: A closure called when each response is received from the server.
    /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
    func getTokenBundles(
        _ request: Superdapp_GetTokenBundlesRequest,
        callOptions: CallOptions? = nil,
        handler: @escaping (Superdapp_TokenBundleResponse) -> Void
    ) -> ServerStreamingCall<Superdapp_GetTokenBundlesRequest, Superdapp_TokenBundleResponse> {
        makeServerStreamingCall(
            path: Superdapp_PitBossClientMetadata.Methods.getTokenBundles.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetTokenBundlesInterceptors() ?? [],
            handler: handler
        )
    }
}

@available(*, deprecated)
extension Superdapp_PitBossClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Superdapp_PitBossNIOClient")
final class Superdapp_PitBossClient: Superdapp_PitBossClientProtocol {
    private let lock = Lock()
    private var _defaultCallOptions: CallOptions
    private var _interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol?
    let channel: GRPCChannel
    var defaultCallOptions: CallOptions {
        get { lock.withLock { self._defaultCallOptions } }
        set { lock.withLockVoid { self._defaultCallOptions = newValue } }
    }

    var interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol? {
        get { lock.withLock { self._interceptors } }
        set { lock.withLockVoid { self._interceptors = newValue } }
    }

    /// Creates a client for the superdapp.PitBoss service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        _defaultCallOptions = defaultCallOptions
        _interceptors = interceptors
    }
}

struct Superdapp_PitBossNIOClient: Superdapp_PitBossClientProtocol {
    var channel: GRPCChannel
    var defaultCallOptions: CallOptions
    var interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol?

    /// Creates a client for the superdapp.PitBoss service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
protocol Superdapp_PitBossAsyncClientProtocol: GRPCClient {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol? { get }

    func makeGetTokenBundlesCall(
        _ request: Superdapp_GetTokenBundlesRequest,
        callOptions: CallOptions?
    ) -> GRPCAsyncServerStreamingCall<Superdapp_GetTokenBundlesRequest, Superdapp_TokenBundleResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Superdapp_PitBossAsyncClientProtocol {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Superdapp_PitBossClientMetadata.serviceDescriptor
    }

    var interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol? {
        nil
    }

    func makeGetTokenBundlesCall(
        _ request: Superdapp_GetTokenBundlesRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncServerStreamingCall<Superdapp_GetTokenBundlesRequest, Superdapp_TokenBundleResponse> {
        makeAsyncServerStreamingCall(
            path: Superdapp_PitBossClientMetadata.Methods.getTokenBundles.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetTokenBundlesInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Superdapp_PitBossAsyncClientProtocol {
    func getTokenBundles(
        _ request: Superdapp_GetTokenBundlesRequest,
        callOptions: CallOptions? = nil
    ) -> GRPCAsyncResponseStream<Superdapp_TokenBundleResponse> {
        performAsyncServerStreamingCall(
            path: Superdapp_PitBossClientMetadata.Methods.getTokenBundles.path,
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetTokenBundlesInterceptors() ?? []
        )
    }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
struct Superdapp_PitBossAsyncClient: Superdapp_PitBossAsyncClientProtocol {
    var channel: GRPCChannel
    var defaultCallOptions: CallOptions
    var interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol?

    init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Superdapp_PitBossClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

protocol Superdapp_PitBossClientInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when invoking 'getTokenBundles'.
    func makeGetTokenBundlesInterceptors() -> [ClientInterceptor<Superdapp_GetTokenBundlesRequest, Superdapp_TokenBundleResponse>]
}

enum Superdapp_PitBossClientMetadata {
    static let serviceDescriptor = GRPCServiceDescriptor(
        name: "PitBoss",
        fullName: "superdapp.PitBoss",
        methods: [
            Superdapp_PitBossClientMetadata.Methods.getTokenBundles,
        ]
    )

    enum Methods {
        static let getTokenBundles = GRPCMethodDescriptor(
            name: "GetTokenBundles",
            path: "/superdapp.PitBoss/GetTokenBundles",
            type: GRPCCallType.serverStreaming
        )
    }
}

/// To build a server, implement a class that conforms to this protocol.
protocol Superdapp_PitBossProvider: CallHandlerProvider {
    var interceptors: Superdapp_PitBossServerInterceptorFactoryProtocol? { get }

    func getTokenBundles(request: Superdapp_GetTokenBundlesRequest, context: StreamingResponseCallContext<Superdapp_TokenBundleResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Superdapp_PitBossProvider {
    var serviceName: Substring {
        Superdapp_PitBossServerMetadata.serviceDescriptor.fullName[...]
    }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "GetTokenBundles":
            return ServerStreamingServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Superdapp_GetTokenBundlesRequest>(),
                responseSerializer: ProtobufSerializer<Superdapp_TokenBundleResponse>(),
                interceptors: interceptors?.makeGetTokenBundlesInterceptors() ?? [],
                userFunction: getTokenBundles(request:context:)
            )

        default:
            return nil
        }
    }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
protocol Superdapp_PitBossAsyncProvider: CallHandlerProvider, Sendable {
    static var serviceDescriptor: GRPCServiceDescriptor { get }
    var interceptors: Superdapp_PitBossServerInterceptorFactoryProtocol? { get }

    func getTokenBundles(
        request: Superdapp_GetTokenBundlesRequest,
        responseStream: GRPCAsyncResponseStreamWriter<Superdapp_TokenBundleResponse>,
        context: GRPCAsyncServerCallContext
    ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Superdapp_PitBossAsyncProvider {
    static var serviceDescriptor: GRPCServiceDescriptor {
        Superdapp_PitBossServerMetadata.serviceDescriptor
    }

    var serviceName: Substring {
        Superdapp_PitBossServerMetadata.serviceDescriptor.fullName[...]
    }

    var interceptors: Superdapp_PitBossServerInterceptorFactoryProtocol? {
        nil
    }

    func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "GetTokenBundles":
            return GRPCAsyncServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Superdapp_GetTokenBundlesRequest>(),
                responseSerializer: ProtobufSerializer<Superdapp_TokenBundleResponse>(),
                interceptors: interceptors?.makeGetTokenBundlesInterceptors() ?? [],
                wrapping: { try await self.getTokenBundles(request: $0, responseStream: $1, context: $2) }
            )

        default:
            return nil
        }
    }
}

protocol Superdapp_PitBossServerInterceptorFactoryProtocol: Sendable {
    /// - Returns: Interceptors to use when handling 'getTokenBundles'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetTokenBundlesInterceptors() -> [ServerInterceptor<Superdapp_GetTokenBundlesRequest, Superdapp_TokenBundleResponse>]
}

enum Superdapp_PitBossServerMetadata {
    static let serviceDescriptor = GRPCServiceDescriptor(
        name: "PitBoss",
        fullName: "superdapp.PitBoss",
        methods: [
            Superdapp_PitBossServerMetadata.Methods.getTokenBundles,
        ]
    )

    enum Methods {
        static let getTokenBundles = GRPCMethodDescriptor(
            name: "GetTokenBundles",
            path: "/superdapp.PitBoss/GetTokenBundles",
            type: GRPCCallType.serverStreaming
        )
    }
}
