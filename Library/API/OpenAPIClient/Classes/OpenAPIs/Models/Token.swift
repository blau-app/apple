//
// Token.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Token: Codable, JSONEncodable, Hashable {

    public enum Erc: String, Codable, CaseIterable {
        case _20 = "ERC_20"
        case _721 = "ERC_721"
        case _1155 = "ERC_1155"
    }
    public var erc: Erc
    public var address: String?
    public var chainId: Int
    public var name: String
    public var symbol: String
    public var decimals: Int
    public var balance: V1GetTokenBundlesPost200ResponseTokenBundlesInnerInInnerBalance

    public init(erc: Erc, address: String?, chainId: Int, name: String, symbol: String, decimals: Int, balance: V1GetTokenBundlesPost200ResponseTokenBundlesInnerInInnerBalance) {
        self.erc = erc
        self.address = address
        self.chainId = chainId
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.balance = balance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case erc
        case address
        case chainId = "chain_id"
        case name
        case symbol
        case decimals
        case balance
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(erc, forKey: .erc)
        try container.encode(address, forKey: .address)
        try container.encode(chainId, forKey: .chainId)
        try container.encode(name, forKey: .name)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(decimals, forKey: .decimals)
        try container.encode(balance, forKey: .balance)
    }
}

